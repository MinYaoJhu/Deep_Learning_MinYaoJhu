layer_dense(units = 2^powerto, activation = "relu", input_shape = c(10000) )
# additional layers
if (nlayers>1) {
map(2:nlayers, ~ network %>%
layer_dense(units = 2^powerto, activation = "relu")
)
}
# output layer
network %>%
layer_dense(units = 46, activation = "softmax")
# compile it
model %>% compile(
optimizer = "rmsprop",
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
}
nlayers_input <- c(1,3:8)
nlayers_input %>%
map(define_model) %>%
map(run_model) %>%
map_df(data.frame, .id = "nlayers") %>%
mutate(nlayers = as.character(factor(nlayers, labels = nlayers_input)),
powerto = "64") -> history_nlayers
define_model <- function(nlayers = 2, powerto = 6) {
# input layer
network <- keras_model_sequential() %>%
layer_dense(units = 2^powerto, activation = "relu", input_shape = c(10000) )
# additional layers
if (nlayers>1) {
map(2:nlayers, ~ network %>%
layer_dense(units = 2^powerto, activation = "relu")
)
}
# output layer
network %>%
layer_dense(units = 46, activation = "softmax")
# compile it
network %>% compile(
optimizer = "rmsprop",
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
}
nlayers_input <- c(1,3:8)
nlayers_input %>%
map(define_model) %>%
map(run_model) %>%
map_df(data.frame, .id = "nlayers") %>%
mutate(nlayers = as.character(factor(nlayers, labels = nlayers_input)),
powerto = "64") -> history_nlayers
library(tidyverse)
library(ISLR)
library(tree)
data(OJ)
#?OJ
head(OJ)
summary(OJ)
OJ %>% select(StoreID, STORE) %>% head()
store_cat <- OJ %>% select(StoreID) %>%
mutate(row=1:nrow(.),data=1) %>%
pivot_wider(id_cols = row, names_from=StoreID, values_from=data, values_fill=0, names_prefix="Store")
head(store_cat)
OJ <- OJ %>% select(-StoreID, -STORE, -Store7) %>% cbind(store_cat)
head(OJ)
set.seed(10)
train <- sample(1:nrow(OJ), size = 800)
OJ.train <- OJ[train,]
OJ.test <- OJ[-train,]
str(OJ.test)
str(OJ.train)
tree.OJ=tree(Purchase~.,OJ,subset=train)
summary(tree.OJ)
tree.pred=predict(tree.OJ,OJ.test,type="class")
purchase.test=OJ.test$Purchase
table(tree.pred,purchase.test)
(135+88)/270
1-((135+88)/270)
library(keras)
library(reticulate)
library(tensorflow)
use_condaenv("r-reticulate")
OJ.train.label <- OJ.train %>% select(Purchase) %>% mutate(Purchase=ifelse(Purchase=="CH", 0, 1)) %>% pull(Purchase)
str(OJ.train.label)
OJ.test.label <- OJ.test %>% select(Purchase) %>% mutate(Purchase=ifelse(Purchase=="CH", 0, 1)) %>% pull(Purchase)
str(OJ.test.label)
OJ.train <- OJ.train %>% select(-Purchase)
str(OJ.train)
OJ.test <- OJ.test %>% select(-Purchase)
str(OJ.test)
oj.mean <- apply(OJ.train, 2, mean)
oj.std <- apply(OJ.train, 2, sd)
OJ.train <- scale(OJ.train, center=oj.mean, scale=oj.std)
OJ.test <- scale(OJ.test, center=oj.mean, scale=oj.std)
str(OJ.train)
str(OJ.test)
library(tidyverse)
library(ISLR)
library(tree)
data(OJ)
#?OJ
head(OJ)
summary(OJ)
OJ %>% select(StoreID, STORE) %>% head()
store_cat <- OJ %>% select(StoreID) %>%
mutate(row=1:nrow(.),data=1) %>%
pivot_wider(id_cols = row, names_from=StoreID, values_from=data, values_fill=0, names_prefix="Store")
head(store_cat)
OJ <- OJ %>% select(-StoreID, -STORE, -Store7) %>% cbind(store_cat)
head(OJ)
set.seed(10)
train <- sample(1:nrow(OJ), size = 800)
OJ.train <- OJ[train,]
OJ.test <- OJ[-train,]
str(OJ.test)
str(OJ.train)
tree.OJ=tree(Purchase~.,OJ,subset=train)
summary(tree.OJ)
tree.pred=predict(tree.OJ,OJ.test,type="class")
purchase.test=OJ.test$Purchase
table(tree.pred,purchase.test)
(135+88)/270
1-((135+88)/270)
library(keras)
library(reticulate)
library(tensorflow)
use_condaenv("r-reticulate")
OJ.train.label <- OJ.train %>% select(Purchase) %>% mutate(Purchase=ifelse(Purchase=="CH", 0, 1)) %>% pull(Purchase)
str(OJ.train.label)
OJ.test.label <- OJ.test %>% select(Purchase) %>% mutate(Purchase=ifelse(Purchase=="CH", 0, 1)) %>% pull(Purchase)
str(OJ.test.label)
OJ.train <- OJ.train %>% select(-Purchase)
str(OJ.train)
OJ.test <- OJ.test %>% select(-Purchase)
str(OJ.test)
oj.mean <- apply(OJ.train, 2, mean)
oj.std <- apply(OJ.train, 2, sd)
OJ.train <- scale(OJ.train, center=oj.mean, scale=oj.std)
OJ.test <- scale(OJ.test, center=oj.mean, scale=oj.std)
str(OJ.train)
str(OJ.test)
set.seed(10)
val_indices <- sample(1:nrow(OJ.train), size = 100)
OJ.train_val <- OJ.train[val_indices,]
partial_OJ.train <- OJ.train[-val_indices,]
# OJ.test <- data.matrix(OJ.test, rownames.force = NA)
# OJ.train <- data.matrix(OJ.train, rownames.force = NA)
# OJ.train_val <- data.matrix(OJ.train_val, rownames.force = NA)
# partial_OJ.train <- data.matrix(partial_OJ.train, rownames.force = NA)
OJ.train_val.label <- OJ.train.label[val_indices]
partial_OJ.train.label <- OJ.train.label[-val_indices]
dim(OJ.train_val)
dim(partial_OJ.train)
str(OJ.train_val)
str(partial_OJ.train)
str(OJ.train_val.label)
str(partial_OJ.train.label)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(OJ.train) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
partial_OJ.train,
partial_OJ.train.label,
epochs = 100,
batch_size = 256,
validation_data = list(OJ.train_val, OJ.train_val.label)
))
str(history)
plot(history)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(OJ.train) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
OJ.train,
OJ.train.label,
epochs = 56,
batch_size = 256
))
plot(history)
results <- model %>% evaluate(OJ.test, OJ.test.label)
results
define_model <- function(powerto = 6) {
network_int <- keras_model_sequential() %>%
layer_dense(units = 2^powerto, activation = "relu", input_shape = ncol(OJ.train)) %>%
layer_dense(units = 2^powerto, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
network_int %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
}
run_model <- function(network, epochs = 20) {
network %>% fit(
partial_OJ.train,
partial_OJ.train.label,
epochs = epochs,
batch_size = 256,
validation_data = list(OJ.train_val, OJ.train_val.label)
)
}
define_model() %>%
run_model() -> history_original
history_original %>%
plot()
define_model(5) %>%
run_model() -> history_5
history_5 %>%
plot()
define_model(4) %>%
run_model() -> history_4
history_4 %>%
plot()
define_model <- function(powerto = 6) {
network_int <- keras_model_sequential() %>%
layer_dense(units = 2^powerto, activation = "relu", input_shape = ncol(OJ.train)) %>%
layer_dense(units = 2^powerto, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
network_int %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
}
run_model <- function(network, epochs = 100) {
network %>% fit(
partial_OJ.train,
partial_OJ.train.label,
epochs = epochs,
batch_size = 256,
validation_data = list(OJ.train_val, OJ.train_val.label)
)
}
define_model(4) %>%
run_model() -> history_4
history_4 %>%
plot()
define_model <- function(powerto) {
network_int <- keras_model_sequential() %>%
layer_dense(units = 2^powerto, activation = "relu", input_shape = ncol(OJ.train)) %>%
layer_dense(units = 2^powerto, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
network_int %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
}
run_model <- function(network, epochs) {
network %>% fit(
partial_OJ.train,
partial_OJ.train.label,
epochs = epochs,
batch_size = 256,
validation_data = list(OJ.train_val, OJ.train_val.label)
)
}
define_model(4) %>%
run_model(100) -> history_4
history_4 %>%
plot()
define_model(5) %>%
run_model(100) -> history_5
history_5 %>%
plot()
define_model(6) %>%
run_model(100) -> history_6
history_6 %>%
plot()
define_model(3) %>%
run_model(100) -> history_3
history_3 %>%
plot()
define_model <- function(nlayers = 2, powerto = 4) {
# input layer
network <- keras_model_sequential() %>%
layer_dense(units = 2^powerto, activation = "relu", input_shape = ncol(OJ.train))
# additional layers
if (nlayers>1) {
map(2:nlayers, ~ network %>%
layer_dense(units = 2^powerto, activation = "relu")
)
}
# output layer
network %>%
layer_dense(units = 1, activation = "sigmoid")
# compile it
network %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
}
nlayers_input_1 <- 1
nlayers_input_1 %>%
map(define_model) %>%
map(run_model) %>%
map_df(data.frame, .id = "nlayers") %>%
mutate(nlayers = as.character(factor(nlayers, labels = nlayers_input)),
powerto = "64") -> history_nlayers_1
nlayers_input_3 <- 3
nlayers_input_3 %>%
map(define_model) %>%
map(run_model) %>%
map_df(data.frame, .id = "nlayers") %>%
mutate(nlayers = as.character(factor(nlayers, labels = nlayers_input)),
powerto = "64") -> history_nlayers_3
nlayers_input_3 <- 3
nlayers_input_3 %>%
map(define_model) %>%
map(run_model) %>%
map_df(data.frame, .id = "nlayers") %>%
mutate(nlayers = as.character(factor(nlayers, labels = nlayers_input_3)),
powerto = "64") -> history_nlayers_3
define_model <- function(nlayers, powerto) {
# input layer
network <- keras_model_sequential() %>%
layer_dense(units = 2^powerto, activation = "relu", input_shape = ncol(OJ.train))
# additional layers
if (nlayers>1) {
map(2:nlayers, ~ network %>%
layer_dense(units = 2^powerto, activation = "relu")
)
}
# output layer
network %>%
layer_dense(units = 1, activation = "sigmoid")
# compile it
network %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
}
define_model(2,4) %>%
run_model(100) -> history_2_4
history_2_4 %>%
plot()
define_model(1,4) %>%
run_model(100) -> history_1_4
history_1_4 %>%
plot()
define_model(2,4) %>%
run_model(100) -> history_2_4
history_2_4 %>%
plot()
define_model(3,4) %>%
run_model(100) -> history_3_4
history_3_4 %>%
plot()
library(keras)
library(reticulate)
library(tensorflow)
library(tidyverse)
use_condaenv("r-reticulate")
cancer <- readr::read_csv("C:/Users/sandy/rclub/Deep_learning_data/TCGA-PANCAN-HiSeq-801x20531/data.csv")
dim(cancer)
head(cancer)
set.seed(10)
train <- sample(1:nrow(cancer), size = 600)
cancer.train <- cancer[train,]
cancer.test <- cancer[-train,]
dim(cancer.train)
dim(cancer.test)
cancer.train <- cancer.train %>% select(-X1)
head(cancer.train)
cancer.test <- cancer.test %>% select(-X1)
head(cancer.test)
dim(cancer.train)
novariation_train <- apply(cancer.train, 2, sd)==0
cancer.train_rm <- cancer.train[,!novariation_train]
cancer.test_rm <- cancer.test[,!novariation_train]
dim(cancer.train_rm)
dim(cancer.test_rm)
lowexpression_train <- apply(cancer.train_rm, 2, mean) < 1
cancer.train_rm <- cancer.train_rm[, !lowexpression_train]
cancer.test_rm <- cancer.test_rm[, !lowexpression_train]
dim(cancer.train_rm)
dim(cancer.test_rm)
cancer.mean <- apply(cancer.train_rm, 2, mean)
cancer.std <- apply(cancer.train_rm, 2, sd)
cancer.train_rm <- scale(cancer.train_rm, center = cancer.mean, scale = cancer.std)
cancer.test_rm <- scale(cancer.test_rm, center = cancer.mean, scale = cancer.std)
str(cancer.train_rm)
str(cancer.test_rm)
cancer_label <- readr::read_csv("C:/Users/sandy/rclub/Deep_learning_data/TCGA-PANCAN-HiSeq-801x20531/labels.csv")
dim(cancer_label)
head(cancer_label)
str(cancer_label)
table(cancer_label$Class)
cancer_label.train <- cancer_label[train,]
cancer_label.test <- cancer_label[-train,]
dim(cancer_label.train)
dim(cancer_label.test)
cancer_label.train_vec <- as.integer(as.factor(cancer_label.train$Class)) -1
str(cancer_label.train_vec)
cancer_label.test_vec <- as.integer(as.factor(cancer_label.test$Class)) -1
str(cancer_label.test_vec)
set.seed(10)
val_indices <- sample(1:nrow(cancer.train_rm), size = 100)
cancer.train_rm_val <- cancer.train_rm[val_indices,]
cancer.train_rm_part <- cancer.train_rm[-val_indices,]
cancer.train_rm_val.label <- cancer_label.train_vec[val_indices]
cancer.train_rm_part.label <- cancer_label.train_vec[-val_indices]
dim(cancer.train_rm_val)
dim(cancer.train_rm_part)
str(cancer.train_rm_val)
str(cancer.train_rm_part)
str(cancer.train_rm_val.label)
str(cancer.train_rm_part.label)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(cancer.train_rm) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 5, activation = "softmax")
model %>% compile(
optimizer = "rmsprop",
loss = "sparse_categorical_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
cancer.train_rm_part,
cancer.train_rm_part.label,
epochs = 20,
batch_size = 64,
validation_data = list(cancer.train_rm_val, cancer.train_rm_val.label)
))
summary(model)
str(history)
plot(history)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(cancer.train_rm) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 5, activation = "softmax")
model %>% compile(
optimizer = "rmsprop",
loss = "sparse_categorical_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
cancer.train_rm,
cancer_label.train_vec,
epochs = 8,
batch_size = 64
))
plot(history)
results <- model %>% evaluate(cancer.test_rm, cancer_label.test_vec)
results
define_model <- function(nlayers, powerto) {
# input layer
network <- keras_model_sequential() %>%
layer_dense(units = 2^powerto, activation = "relu", input_shape = ncol(cancer.train_rm) )
# additional layers
if (nlayers>1) {
map(2:nlayers, ~ network %>%
layer_dense(units = 2^powerto, activation = "relu")
)
}
# output layer
network %>%
layer_dense(units = 5, activation = "softmax")
# compile it
network %>% compile(
optimizer = "rmsprop",
loss = "sparse_categorical_crossentropy",
metrics = c("accuracy")
)
}
run_model <- function(network, epochs = 20) {
network %>% fit(
cancer.train_rm_part,
cancer.train_rm_part.label,
epochs = epochs,
batch_size = 64,
validation_data = list(cancer.train_rm_val, cancer.train_rm_val.label)
)
}
define_model(2,4) %>%
run_model(20) -> history_2_4
history_2_4 %>%
plot()
define_model(1,4) %>%
run_model(20) -> history_2_4
history_2_4 %>%
plot()
define_model(3,4) %>%
run_model(20) -> history_3_4
history_3_4 %>%
plot()
define_model(1,4) %>%
run_model(20) -> history_1_4
history_1_4 %>%
plot()
define_model(2,5) %>%
run_model(20) -> history_2_5
history_2_5 %>%
plot()
define_model(2,3) %>%
run_model(20) -> history_2_3
history_2_3 %>%
plot()
