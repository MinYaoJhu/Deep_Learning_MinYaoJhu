dim(cancer)
head(cancer)
set.seed(10)
train <- sample(1:nrow(cancer), size = 600)
cancer.train <- cancer[train,]
cancer.test <- cancer[-train,]
dim(cancer.train)
dim(cancer.test)
cancer.train <- cancer.train %>% select(-X1)
head(cancer.train)
cancer.test <- cancer.test %>% select(-X1)
head(cancer.test)
dim(cancer.train)
novariation_train <- apply(cancer.train, 2, sd)==0
cancer.train_rm <- cancer.train[,!novariation_train]
cancer.test_rm <- cancer.test[,!novariation_train]
dim(cancer.train_rm)
dim(cancer.test_rm)
lowexpression_train <- apply(cancer.train_rm, 2, mean) < 1
cancer.train_rm <- cancer.train_rm[, !lowexpression_train]
cancer.test_rm <- cancer.test_rm[, !lowexpression_train]
dim(cancer.train_rm)
dim(cancer.test_rm)
cancer.mean <- apply(cancer.train_rm, 2, mean)
cancer.std <- apply(cancer.train_rm, 2, sd)
cancer.train_rm <- scale(cancer.train_rm, center = cancer.mean, scale = cancer.std)
cancer.test_rm <- scale(cancer.test_rm, center = cancer.mean, scale = cancer.std)
str(cancer.train_rm)
str(cancer.test_rm)
cancer_label <- readr::read_csv("C:/Users/sandy/rclub/Deep_learning_data/TCGA-PANCAN-HiSeq-801x20531/labels.csv")
dim(cancer_label)
head(cancer_label)
str(cancer_label)
table(cancer_label$Class)
cancer_label.train <- cancer_label[train,]
cancer_label.test <- cancer_label[-train,]
dim(cancer_label.train)
dim(cancer_label.test)
cancer_label.train_vec <- as.numeric(as.factor(cancer_label.train$Class)) -1
str(cancer_label.train_vec)
cancer_label.test_vec <- as.numeric(as.factor(cancer_label.test$Class)) -1
str(cancer_label.test_vec)
set.seed(10)
val_indices <- sample(1:nrow(cancer.train_rm), size = 100)
cancer.train_rm_val <- cancer.train_rm[val_indices,]
cancer.train_rm_part <- cancer.train_rm[-val_indices,]
cancer.train_rm_val.label <- cancer_label.train_vec[val_indices]
cancer.train_rm_part.label <- cancer_label.train_vec[-val_indices]
dim(cancer.train_rm_val)
dim(cancer.train_rm_part)
str(cancer.train_rm_val)
str(cancer.train_rm_part)
str(cancer.train_rm_val.label)
str(cancer.train_rm_part.label)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(cancer.train_rm) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
cancer.train_rm_part,
cancer.train_rm_part.label,
epochs = 100,
batch_size = 256,
validation_data = list(cancer.train_rm_val, cancer.train_rm_val.label)
))
summary(model)
library(keras)
library(reticulate)
library(tensorflow)
library(tidyverse)
use_condaenv("r-reticulate")
cancer <- readr::read_csv("C:/Users/sandy/rclub/Deep_learning_data/TCGA-PANCAN-HiSeq-801x20531/data.csv")
dim(cancer)
head(cancer)
set.seed(10)
train <- sample(1:nrow(cancer), size = 700)
cancer.train <- cancer[train,]
cancer.test <- cancer[-train,]
dim(cancer.train)
dim(cancer.test)
cancer.train <- cancer.train %>% select(-X1)
head(cancer.train)
cancer.test <- cancer.test %>% select(-X1)
head(cancer.test)
dim(cancer.train)
novariation_train <- apply(cancer.train, 2, sd)==0
cancer.train_rm <- cancer.train[,!novariation_train]
cancer.test_rm <- cancer.test[,!novariation_train]
dim(cancer.train_rm)
dim(cancer.test_rm)
lowexpression_train <- apply(cancer.train_rm, 2, mean) < 1
cancer.train_rm <- cancer.train_rm[, !lowexpression_train]
cancer.test_rm <- cancer.test_rm[, !lowexpression_train]
dim(cancer.train_rm)
dim(cancer.test_rm)
cancer.mean <- apply(cancer.train_rm, 2, mean)
cancer.std <- apply(cancer.train_rm, 2, sd)
cancer.train_rm <- scale(cancer.train_rm, center = cancer.mean, scale = cancer.std)
cancer.test_rm <- scale(cancer.test_rm, center = cancer.mean, scale = cancer.std)
str(cancer.train_rm)
str(cancer.test_rm)
cancer_label <- readr::read_csv("C:/Users/sandy/rclub/Deep_learning_data/TCGA-PANCAN-HiSeq-801x20531/labels.csv")
dim(cancer_label)
head(cancer_label)
str(cancer_label)
table(cancer_label$Class)
cancer_label.train <- cancer_label[train,]
cancer_label.test <- cancer_label[-train,]
dim(cancer_label.train)
dim(cancer_label.test)
cancer_label.train_vec <- as.numeric(as.factor(cancer_label.train$Class)) -1
str(cancer_label.train_vec)
cancer_label.test_vec <- as.numeric(as.factor(cancer_label.test$Class)) -1
str(cancer_label.test_vec)
set.seed(10)
val_indices <- sample(1:nrow(cancer.train_rm), size = 100)
cancer.train_rm_val <- cancer.train_rm[val_indices,]
cancer.train_rm_part <- cancer.train_rm[-val_indices,]
cancer.train_rm_val.label <- cancer_label.train_vec[val_indices]
cancer.train_rm_part.label <- cancer_label.train_vec[-val_indices]
dim(cancer.train_rm_val)
dim(cancer.train_rm_part)
str(cancer.train_rm_val)
str(cancer.train_rm_part)
str(cancer.train_rm_val.label)
str(cancer.train_rm_part.label)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(cancer.train_rm) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
cancer.train_rm_part,
cancer.train_rm_part.label,
epochs = 100,
batch_size = 256,
validation_data = list(cancer.train_rm_val, cancer.train_rm_val.label)
))
summary(model)
```{r}
str(history)
plot(history)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(OJ.train) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(cancer.train_rm) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
cancer.train_rm,
cancer_label.train_vec,
epochs = 56,
batch_size = 256
))
plot(history)
plot(history)
results <- model %>% evaluate(cancer.test_rm, cancer_label.test_vec)
results
library(keras)
library(reticulate)
library(tensorflow)
library(tidyverse)
use_condaenv("r-reticulate")
cancer <- readr::read_csv("C:/Users/sandy/rclub/Deep_learning_data/TCGA-PANCAN-HiSeq-801x20531/data.csv")
dim(cancer)
head(cancer)
set.seed(10)
train <- sample(1:nrow(cancer), size = 700)
cancer.train <- cancer[train,]
cancer.test <- cancer[-train,]
dim(cancer.train)
dim(cancer.test)
cancer.train <- cancer.train %>% select(-X1)
head(cancer.train)
cancer.test <- cancer.test %>% select(-X1)
head(cancer.test)
dim(cancer.train)
novariation_train <- apply(cancer.train, 2, sd)==0
cancer.train_rm <- cancer.train[,!novariation_train]
cancer.test_rm <- cancer.test[,!novariation_train]
dim(cancer.train_rm)
dim(cancer.test_rm)
lowexpression_train <- apply(cancer.train_rm, 2, mean) < 1
cancer.train_rm <- cancer.train_rm[, !lowexpression_train]
cancer.test_rm <- cancer.test_rm[, !lowexpression_train]
dim(cancer.train_rm)
dim(cancer.test_rm)
cancer.mean <- apply(cancer.train_rm, 2, mean)
cancer.std <- apply(cancer.train_rm, 2, sd)
cancer.train_rm <- scale(cancer.train_rm, center = cancer.mean, scale = cancer.std)
cancer.test_rm <- scale(cancer.test_rm, center = cancer.mean, scale = cancer.std)
str(cancer.train_rm)
str(cancer.test_rm)
cancer_label <- readr::read_csv("C:/Users/sandy/rclub/Deep_learning_data/TCGA-PANCAN-HiSeq-801x20531/labels.csv")
dim(cancer_label)
head(cancer_label)
str(cancer_label)
table(cancer_label$Class)
cancer_label.train <- cancer_label[train,]
cancer_label.test <- cancer_label[-train,]
dim(cancer_label.train)
dim(cancer_label.test)
cancer_label.train_vec <- as.numeric(as.factor(cancer_label.train$Class)) -1
str(cancer_label.train_vec)
cancer_label.test_vec <- as.numeric(as.factor(cancer_label.test$Class)) -1
str(cancer_label.test_vec)
set.seed(10)
val_indices <- sample(1:nrow(cancer.train_rm), size = 100)
cancer.train_rm_val <- cancer.train_rm[val_indices,]
cancer.train_rm_part <- cancer.train_rm[-val_indices,]
cancer.train_rm_val.label <- cancer_label.train_vec[val_indices]
cancer.train_rm_part.label <- cancer_label.train_vec[-val_indices]
dim(cancer.train_rm_val)
dim(cancer.train_rm_part)
str(cancer.train_rm_val)
str(cancer.train_rm_part)
str(cancer.train_rm_val.label)
str(cancer.train_rm_part.label)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(cancer.train_rm) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
cancer.train_rm_part,
cancer.train_rm_part.label,
epochs = 100,
batch_size = 32,
validation_data = list(cancer.train_rm_val, cancer.train_rm_val.label)
))
cancer_label.train_vec <- as.integer(as.factor(cancer_label.train$Class)) -1
str(cancer_label.train_vec)
cancer_label.test_vec <- as.integer(as.factor(cancer_label.test$Class)) -1
str(cancer_label.test_vec)
library(keras)
library(reticulate)
library(tensorflow)
library(tidyverse)
use_condaenv("r-reticulate")
cancer <- readr::read_csv("C:/Users/sandy/rclub/Deep_learning_data/TCGA-PANCAN-HiSeq-801x20531/data.csv")
dim(cancer)
head(cancer)
set.seed(10)
train <- sample(1:nrow(cancer), size = 700)
cancer.train <- cancer[train,]
cancer.test <- cancer[-train,]
dim(cancer.train)
dim(cancer.test)
cancer.train <- cancer.train %>% select(-X1)
head(cancer.train)
cancer.test <- cancer.test %>% select(-X1)
head(cancer.test)
dim(cancer.train)
novariation_train <- apply(cancer.train, 2, sd)==0
cancer.train_rm <- cancer.train[,!novariation_train]
cancer.test_rm <- cancer.test[,!novariation_train]
dim(cancer.train_rm)
dim(cancer.test_rm)
lowexpression_train <- apply(cancer.train_rm, 2, mean) < 1
cancer.train_rm <- cancer.train_rm[, !lowexpression_train]
cancer.test_rm <- cancer.test_rm[, !lowexpression_train]
dim(cancer.train_rm)
dim(cancer.test_rm)
cancer.mean <- apply(cancer.train_rm, 2, mean)
cancer.std <- apply(cancer.train_rm, 2, sd)
cancer.train_rm <- scale(cancer.train_rm, center = cancer.mean, scale = cancer.std)
cancer.test_rm <- scale(cancer.test_rm, center = cancer.mean, scale = cancer.std)
str(cancer.train_rm)
str(cancer.test_rm)
cancer_label <- readr::read_csv("C:/Users/sandy/rclub/Deep_learning_data/TCGA-PANCAN-HiSeq-801x20531/labels.csv")
dim(cancer_label)
head(cancer_label)
str(cancer_label)
table(cancer_label$Class)
cancer_label.train <- cancer_label[train,]
cancer_label.test <- cancer_label[-train,]
dim(cancer_label.train)
dim(cancer_label.test)
cancer_label.train_vec <- as.integer(as.factor(cancer_label.train$Class)) -1
str(cancer_label.train_vec)
cancer_label.test_vec <- as.integer(as.factor(cancer_label.test$Class)) -1
str(cancer_label.test_vec)
set.seed(10)
val_indices <- sample(1:nrow(cancer.train_rm), size = 100)
cancer.train_rm_val <- cancer.train_rm[val_indices,]
cancer.train_rm_part <- cancer.train_rm[-val_indices,]
cancer.train_rm_val.label <- cancer_label.train_vec[val_indices]
cancer.train_rm_part.label <- cancer_label.train_vec[-val_indices]
dim(cancer.train_rm_val)
dim(cancer.train_rm_part)
str(cancer.train_rm_val)
str(cancer.train_rm_part)
str(cancer.train_rm_val.label)
str(cancer.train_rm_part.label)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(cancer.train_rm) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 5, activation = "softmax")
model %>% compile(
optimizer = "rmsprop",
loss = "sparse_categorical_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
cancer.train_rm_part,
cancer.train_rm_part.label,
epochs = 100,
batch_size = 32,
validation_data = list(cancer.train_rm_val, cancer.train_rm_val.label)
))
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(cancer.train_rm) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 5, activation = "softmax")
model %>% compile(
optimizer = "rmsprop",
loss = "sparse_categorical_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
cancer.train_rm_part,
cancer.train_rm_part.label,
epochs = 50,
batch_size = 64,
validation_data = list(cancer.train_rm_val, cancer.train_rm_val.label)
))
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(cancer.train_rm) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 5, activation = "softmax")
model %>% compile(
optimizer = "rmsprop",
loss = "sparse_categorical_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
cancer.train_rm_part,
cancer.train_rm_part.label,
epochs = 20,
batch_size = 64,
validation_data = list(cancer.train_rm_val, cancer.train_rm_val.label)
))
summary(model)
str(history)
plot(history)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(cancer.train_rm) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 5, activation = "softmax")
model %>% compile(
optimizer = "rmsprop",
loss = "sparse_categorical_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
cancer.train_rm,
cancer_label.train_vec,
epochs = 4,
batch_size = 64
))
plot(history)
results <- model %>% evaluate(cancer.test_rm, cancer_label.test_vec)
results
library(keras)
library(reticulate)
library(tensorflow)
library(tidyverse)
use_condaenv("r-reticulate")
cancer <- readr::read_csv("C:/Users/sandy/rclub/Deep_learning_data/TCGA-PANCAN-HiSeq-801x20531/data.csv")
dim(cancer)
head(cancer)
set.seed(10)
train <- sample(1:nrow(cancer), size = 600)
cancer.train <- cancer[train,]
cancer.test <- cancer[-train,]
dim(cancer.train)
dim(cancer.test)
cancer.train <- cancer.train %>% select(-X1)
head(cancer.train)
cancer.test <- cancer.test %>% select(-X1)
head(cancer.test)
dim(cancer.train)
novariation_train <- apply(cancer.train, 2, sd)==0
cancer.train_rm <- cancer.train[,!novariation_train]
cancer.test_rm <- cancer.test[,!novariation_train]
dim(cancer.train_rm)
dim(cancer.test_rm)
lowexpression_train <- apply(cancer.train_rm, 2, mean) < 1
cancer.train_rm <- cancer.train_rm[, !lowexpression_train]
cancer.test_rm <- cancer.test_rm[, !lowexpression_train]
dim(cancer.train_rm)
dim(cancer.test_rm)
cancer.mean <- apply(cancer.train_rm, 2, mean)
cancer.std <- apply(cancer.train_rm, 2, sd)
cancer.train_rm <- scale(cancer.train_rm, center = cancer.mean, scale = cancer.std)
cancer.test_rm <- scale(cancer.test_rm, center = cancer.mean, scale = cancer.std)
str(cancer.train_rm)
str(cancer.test_rm)
cancer_label <- readr::read_csv("C:/Users/sandy/rclub/Deep_learning_data/TCGA-PANCAN-HiSeq-801x20531/labels.csv")
dim(cancer_label)
head(cancer_label)
str(cancer_label)
table(cancer_label$Class)
cancer_label.train <- cancer_label[train,]
cancer_label.test <- cancer_label[-train,]
dim(cancer_label.train)
dim(cancer_label.test)
cancer_label.train_vec <- as.integer(as.factor(cancer_label.train$Class)) -1
str(cancer_label.train_vec)
cancer_label.test_vec <- as.integer(as.factor(cancer_label.test$Class)) -1
str(cancer_label.test_vec)
set.seed(10)
val_indices <- sample(1:nrow(cancer.train_rm), size = 100)
cancer.train_rm_val <- cancer.train_rm[val_indices,]
cancer.train_rm_part <- cancer.train_rm[-val_indices,]
cancer.train_rm_val.label <- cancer_label.train_vec[val_indices]
cancer.train_rm_part.label <- cancer_label.train_vec[-val_indices]
dim(cancer.train_rm_val)
dim(cancer.train_rm_part)
str(cancer.train_rm_val)
str(cancer.train_rm_part)
str(cancer.train_rm_val.label)
str(cancer.train_rm_part.label)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(cancer.train_rm) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 5, activation = "softmax")
model %>% compile(
optimizer = "rmsprop",
loss = "sparse_categorical_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
cancer.train_rm_part,
cancer.train_rm_part.label,
epochs = 20,
batch_size = 64,
validation_data = list(cancer.train_rm_val, cancer.train_rm_val.label)
))
summary(model)
str(history)
plot(history)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(cancer.train_rm) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 5, activation = "softmax")
model %>% compile(
optimizer = "rmsprop",
loss = "sparse_categorical_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
cancer.train_rm,
cancer_label.train_vec,
epochs = 8,
batch_size = 64
))
plot(history)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(cancer.train_rm) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 5, activation = "softmax")
model %>% compile(
optimizer = "rmsprop",
loss = "sparse_categorical_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
cancer.train_rm,
cancer_label.train_vec,
epochs = 10,
batch_size = 64
))
plot(history)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(cancer.train_rm) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 5, activation = "softmax")
model %>% compile(
optimizer = "rmsprop",
loss = "sparse_categorical_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
cancer.train_rm,
cancer_label.train_vec,
epochs = 8,
batch_size = 64
))
plot(history)
results <- model %>% evaluate(cancer.test_rm, cancer_label.test_vec)
results
