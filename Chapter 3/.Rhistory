1-((135+88)/270)
library(keras)
library(reticulate)
library(tensorflow)
use_condaenv("r-reticulate")
OJ.train.label <- OJ.train %>% select(Purchase) %>% mutate(Purchase=ifelse(Purchase=="CH", 0, 1)) %>% pull(Purchase)
str(OJ.train.label)
OJ.test.label <- OJ.test %>% select(Purchase) %>% mutate(Purchase=ifelse(Purchase=="CH", 0, 1)) %>% pull(Purchase)
str(OJ.test.label)
OJ.train <- OJ.train %>% select(-Purchase)
str(OJ.train)
OJ.test <- OJ.test %>% select(-Purchase)
str(OJ.test)
oj.mean <- apply(OJ.train, 2, mean)
oj.std <- apply(OJ.train, 2, sd)
OJ.train <- scale(OJ.train, center=oj.mean, scale=oj.std)
OJ.test <- scale(OJ.test, center=oj.mean, scale=oj.std)
str(OJ.train)
str(OJ.test)
set.seed(10)
val_indices <- sample(1:nrow(OJ.train), size = 100)
OJ.train_val <- OJ.train[val_indices,]
partial_OJ.train <- OJ.train[-val_indices,]
# OJ.test <- data.matrix(OJ.test, rownames.force = NA)
# OJ.train <- data.matrix(OJ.train, rownames.force = NA)
# OJ.train_val <- data.matrix(OJ.train_val, rownames.force = NA)
# partial_OJ.train <- data.matrix(partial_OJ.train, rownames.force = NA)
OJ.train_val.label <- OJ.train.label[val_indices]
partial_OJ.train.label <- OJ.train.label[-val_indices]
dim(OJ.train_val)
dim(partial_OJ.train)
str(OJ.train_val)
str(partial_OJ.train)
str(OJ.train_val.label)
str(partial_OJ.train.label)
define_model <- function(powerto) {
network_int <- keras_model_sequential() %>%
layer_dense(units = 2^powerto, activation = "relu", input_shape = ncol(OJ.train)) %>%
layer_dense(units = 2^powerto, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
network_int %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
}
run_model <- function(network, epochs) {
network %>% fit(
partial_OJ.train,
partial_OJ.train.label,
epochs = epochs,
batch_size = 256,
validation_data = list(OJ.train_val, OJ.train_val.label)
)
}
define_model(3) %>%
run_model(100) -> history_3
history_3 %>%
plot()
define_model(4) %>%
run_model(100) -> history_4
history_4 %>%
plot()
define_model(5) %>%
run_model(100) -> history_5
history_5 %>%
plot()
define_model(6) %>%
run_model(100) -> history_6
history_6 %>%
plot()
define_model <- function(nlayers, powerto) {
# input layer
network <- keras_model_sequential() %>%
layer_dense(units = 2^powerto, activation = "relu", input_shape = ncol(OJ.train))
# additional layers
if (nlayers>1) {
map(2:nlayers, ~ network %>%
layer_dense(units = 2^powerto, activation = "relu")
)
}
# output layer
network %>%
layer_dense(units = 1, activation = "sigmoid")
# compile it
network %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
}
define_model(1,4) %>%
run_model(100) -> history_1_4
history_1_4 %>%
plot()
define_model(2,4) %>%
run_model(100) -> history_2_4
history_2_4 %>%
plot()
define_model(3,4) %>%
run_model(100) -> history_3_4
history_3_4 %>%
plot()
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(OJ.train) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
partial_OJ.train,
partial_OJ.train.label,
epochs = 100,
batch_size = 256,
validation_data = list(OJ.train_val, OJ.train_val.label)
))
str(history)
plot(history)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(OJ.train) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
OJ.train,
OJ.train.label,
epochs = 56,
batch_size = 256
))
plot(history)
results <- model %>% evaluate(OJ.test, OJ.test.label)
results
define_model(1,6) %>%
run_model(100) -> history_1_6
history_1_6 %>%
plot()
define_model(2,6) %>%
run_model(100) -> history_2_6
history_2_6 %>%
plot()
define_model(3,6) %>%
run_model(100) -> history_3_6
history_3_6 %>%
plot()
define_model(1,5) %>%
run_model(100) -> history_1_5
history_1_5 %>%
plot()
define_model(2,5) %>%
run_model(100) -> history_2_5
history_2_5 %>%
plot()
define_model(3,5) %>%
run_model(100) -> history_3_5
history_3_5 %>%
plot()
define_model(3,4) %>%
run_model(100) -> history_3_4
history_3_4 %>%
plot()
define_model(2,4) %>%
run_model(100) -> history_2_4
history_2_4 %>%
plot()
define_model(1,4) %>%
run_model(100) -> history_1_4
history_1_4 %>%
plot()
library(tidyverse)
library(ISLR)
library(tree)
data(OJ)
#?OJ
head(OJ)
summary(OJ)
OJ %>% select(StoreID, STORE) %>% head()
store_cat <- OJ %>% select(StoreID) %>%
mutate(row=1:nrow(.),data=1) %>%
pivot_wider(id_cols = row, names_from=StoreID, values_from=data, values_fill=0, names_prefix="Store")
head(store_cat)
OJ <- OJ %>% select(-StoreID, -STORE, -Store7) %>% cbind(store_cat)
head(OJ)
set.seed(10)
train <- sample(1:nrow(OJ), size = 800)
OJ.train <- OJ[train,]
OJ.test <- OJ[-train,]
str(OJ.test)
str(OJ.train)
tree.OJ=tree(Purchase~.,OJ,subset=train)
summary(tree.OJ)
tree.pred=predict(tree.OJ,OJ.test,type="class")
purchase.test=OJ.test$Purchase
table(tree.pred,purchase.test)
(135+88)/270
1-((135+88)/270)
library(keras)
library(reticulate)
library(tensorflow)
use_condaenv("r-reticulate")
OJ.train.label <- OJ.train %>% select(Purchase) %>% mutate(Purchase=ifelse(Purchase=="CH", 0, 1)) %>% pull(Purchase)
str(OJ.train.label)
OJ.test.label <- OJ.test %>% select(Purchase) %>% mutate(Purchase=ifelse(Purchase=="CH", 0, 1)) %>% pull(Purchase)
str(OJ.test.label)
OJ.train <- OJ.train %>% select(-Purchase)
str(OJ.train)
OJ.test <- OJ.test %>% select(-Purchase)
str(OJ.test)
oj.mean <- apply(OJ.train, 2, mean)
oj.std <- apply(OJ.train, 2, sd)
OJ.train <- scale(OJ.train, center=oj.mean, scale=oj.std)
OJ.test <- scale(OJ.test, center=oj.mean, scale=oj.std)
str(OJ.train)
str(OJ.test)
set.seed(10)
val_indices <- sample(1:nrow(OJ.train), size = 100)
OJ.train_val <- OJ.train[val_indices,]
partial_OJ.train <- OJ.train[-val_indices,]
# OJ.test <- data.matrix(OJ.test, rownames.force = NA)
# OJ.train <- data.matrix(OJ.train, rownames.force = NA)
# OJ.train_val <- data.matrix(OJ.train_val, rownames.force = NA)
# partial_OJ.train <- data.matrix(partial_OJ.train, rownames.force = NA)
OJ.train_val.label <- OJ.train.label[val_indices]
partial_OJ.train.label <- OJ.train.label[-val_indices]
dim(OJ.train_val)
dim(partial_OJ.train)
str(OJ.train_val)
str(partial_OJ.train)
str(OJ.train_val.label)
str(partial_OJ.train.label)
define_model <- function(powerto) {
network_int <- keras_model_sequential() %>%
layer_dense(units = 2^powerto, activation = "relu", input_shape = ncol(OJ.train)) %>%
layer_dense(units = 2^powerto, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
network_int %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
}
run_model <- function(network, epochs) {
network %>% fit(
partial_OJ.train,
partial_OJ.train.label,
epochs = epochs,
batch_size = 256,
validation_data = list(OJ.train_val, OJ.train_val.label)
)
}
define_model(3) %>%
run_model(100) -> history_3
history_3 %>%
plot()
define_model(4) %>%
run_model(100) -> history_4
history_4 %>%
plot()
define_model(5) %>%
run_model(100) -> history_5
history_5 %>%
plot()
define_model(6) %>%
run_model(100) -> history_6
history_6 %>%
plot()
define_model <- function(nlayers, powerto) {
# input layer
network <- keras_model_sequential() %>%
layer_dense(units = 2^powerto, activation = "relu", input_shape = ncol(OJ.train))
# additional layers
if (nlayers>1) {
map(2:nlayers, ~ network %>%
layer_dense(units = 2^powerto, activation = "relu")
)
}
# output layer
network %>%
layer_dense(units = 1, activation = "sigmoid")
# compile it
network %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
}
define_model(1,4) %>%
run_model(100) -> history_1_4
history_1_4 %>%
plot()
define_model(2,4) %>%
run_model(100) -> history_2_4
history_2_4 %>%
plot()
define_model(3,4) %>%
run_model(100) -> history_3_4
history_3_4 %>%
plot()
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(OJ.train) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
partial_OJ.train,
partial_OJ.train.label,
epochs = 100,
batch_size = 256,
validation_data = list(OJ.train_val, OJ.train_val.label)
))
str(history)
plot(history)
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = ncol(OJ.train) ) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
system.time(history <- model %>% fit(
OJ.train,
OJ.train.label,
epochs = 56,
batch_size = 256
))
plot(history)
results <- model %>% evaluate(OJ.test, OJ.test.label)
results
class(OJ.train)
dim(OJ.train_val)
dim(partial_OJ.train)
str(OJ.train_val)
str(partial_OJ.train)
str(OJ.train_val.label)
str(partial_OJ.train.label)
class(OJ.train_val)
class(partial_OJ.train)
class(OJ.train_val.label)
class(partial_OJ.train.label)
superhero_powers %>%
filter(hero_names=="Wonder Woman") %>%
select_if(all_vars(.=="TRUE"))
library("tidyverse")
superhero_info <- readr::read_csv("data/heroes_information.csv", na = c("", "-99", "-"))
superhero_powers <- readr::read_csv("data/super_hero_powers.csv", na = c("", "-99", "-"))
str(superhero_info)
superhero_info <- rename(superhero_info, name="name", gender="Gender", eye_color="Eye color", race="Race", hair_color="Hair color", height="Height", publisher="Publisher", skin_color="Skin color", alignment="Alignment", weight="Weight")
str(superhero_info)
head(superhero_powers)
library("janitor")
superhero_powers <- janitor::clean_names(superhero_powers)
head(superhero_powers)
tabyl(superhero_info, alignment)
superhero_info %>%
filter(alignment == "neutral")
superhero_info %>%
select(name, alignment, race)
str(superhero_info)
tabyl(superhero_info, race)
superhero_info_notH <- superhero_info %>%
filter(race != "Human")
str(superhero_info_notH)
tabyl(superhero_info_notH, race)
str(superhero_info)
tabyl(superhero_info, race)
superhero_info_notH <- superhero_info %>%
filter(!grepl("Human",race,ignore.case = T))
str(superhero_info_notH)
tabyl(superhero_info_notH, race)
Good <- superhero_info %>%
filter(alignment == "good")
Good
Bad <- superhero_info %>%
filter(alignment == "bad")
Bad
tabyl(Good, race)
Good %>%
filter(race == "Asgardian")
Bad %>%
filter(gender == "Male" & race == "Human" & height > 200)
Bad %>%
filter(hair_color == "No Hair") %>%
nrow()
Good %>%
filter(hair_color == "No Hair") %>%
nrow()
superhero_info %>%
filter(height > 200) %>%
filter(weight > 300)
superhero_info %>%
filter(height > 200 | weight > 300)
superhero_info %>%
filter(weight > 450)
superhero_info %>%
filter(weight > 300)
superhero_info %>%
mutate(h_to_w_ratio = height/weight) %>%
arrange(desc(h_to_w_ratio))
superhero_info %>%
mutate(h_to_w_ratio = height/weight) %>%
arrange(h_to_w_ratio)
str(superhero_powers)
superhero_powers %>%
select(hero_names, accelerated_healing, durability, super_strength) %>%
filter(accelerated_healing == "TRUE" & durability == "TRUE" & super_strength == "TRUE")
superhero_powers %>%
select(hero_names, contains("kinesis")) %>%
filter_all(any_vars(.== "TRUE"))
?filter_all
# all_vars(expr)
superhero_powers %>%
filter(hero_names=="Wonder Woman") %>%
select_if(all_vars(.=="TRUE"))
superhero_powers %>%
filter(hero_names, hero_names=="Wonder Woman") %>%
select_if(all_vars(.=="TRUE"))
superhero_powers %>%
filter(hero_names=="Wonder Woman") %>%
select_if(all_vars(.=="TRUE"))
superhero_powers %>%
filter(hero_names=="Wonder Woman") %>%
select_if(all_vars(.=="TRUE"))
library(tidyverse)
fish <- readr::read_csv("data/Gaeta_etal_CLC_data.csv")
mammals <- readr::read_csv("data/mammal_lifehistories_v2.csv")
mammals <- rename(mammals, genus=Genus, wean_mass="wean mass", max_life="max. life", litter_size="litter size", litters_per_year="litters/year")
x <- c(2,5,3,9,8,11,6)
count <- 0
for (val in x) {
if(val %% 2 == 0)  count = count+1
}
print(count)
x <- c(2,5,3,9,8,11,6)
count <- 0
for (val in x) {
if(val %% 2 == 0)  count = count+1
}
print(count)
x <- c(2,5,3,9,8,11,6)
count <- 0
for (val in x) {
if(val %% 2 == 0)
count = count+1
}
print(count)
str(mammals)
str(fish)
x <- c(2,5,3,9,8,11,6)
count <- 0
for (i in x) {
if(i %% 2 == 0)
print(i)
}
for (val in x) {
if(val %% 2 == 0)
count = count+1
}
print(count)
x <- c(2,5,3,9,8,11,6)
count <- 0
for (i in x) {
if(i %% 2 == 0)
print(i)
}
for (val in x) {
if(val %% 2 == 0)
count = count+1
}
print(count)
random_number <- sample(1:1000, size = 100)
for (i in random_number) {
if(i %% 2 == 0)
count = count+1
}
print(count)
random_number
for (i in 1:10) {
print(i)
}
for (i in 1:10) {
print(i^2)
}
x <- c(1,2,5,3,10,9,8,11,6)
count <- 0
for (i in x) {
if(i %% 2 == 0)
print(i)
}
for (i in x) {
if(i %% 2 == 0)
count = count+1
}
print(count)
random_number <- sample(1:1000, size = 100)
random_number
for (i in random_number) {
if(i %% 2 == 0)
count = count+1
}
print(count)
